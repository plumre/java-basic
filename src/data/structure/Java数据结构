Java工具包提供了强大的数据结构。

在Java中的数据结构主要包含以下几种接口和类：

    枚举 Enumeration
    位集合 BitSet
    向量 Vector
    栈 Stack
    字典 Dictionary
    哈希表 Hashtable
    属性 Properties

枚举接口虽然本身不是数据结构，但它在其他数据结构的范畴里应用很广。枚举接口定义了一种从数据结构取回连续元素的方式。
nextElement方法定义了得到一个包含多元素的数据结构的下一个元素。

位集合类实现了一组可以单独设置和清楚的位或标志。该类在处理一组布尔值的时候非常有用，只需给每个值赋值一位，
然后对位进行适当的设置或清除，就可以对布尔值进行操作了。

向量类和传统数组非常相似。但是向量的大小能够根据需要动态的变化。和数组一样，向量对象的元素可以通过索引进行访问。
使用向量的好处就是在创建对象的时候不必给对象指定大小，它能够根据需要动态变化。

栈实现了一个后进先出LIFO的数据结构。
可以把栈理解为对象的垂直分布栈，当添加一个元素时，就将元素放在其他元素的顶部。
当从栈中取元素的时候，就从栈顶取一个元素。

字典类是一个抽象类，它定义了键映射到值的数据结构。
当想要通过特定的键而不是整数索引来访问数据的时候，应使用字典。
由于字典是抽象类，所以它只提供了键映射到值数据结构，而没有特定的实现。

哈希表类提供了一种在用户定义键结构的基础上来组织数据的手段。
例如：在地址列表的哈希表中，可以根据邮政编码作为键来存储和排序数据，而不是通过人名。
哈希表键的含义完全取决于哈希表的使用情景和它包含的数据。

属性继承于Hashtable.Properties类，表示了一个持久的属性集。
属性列表中每个键及其对应值都是一个字符串。
属性类被许多Java类使用。例如：在获取环境变量时它作为System.getProperties()方法的返回值。